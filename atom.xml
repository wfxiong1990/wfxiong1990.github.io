<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Weifeng's Blog]]></title>
  <subtitle><![CDATA[刷机熊也很忙]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://wfxiong1990.github.io/"/>
  <updated>2014-11-04T15:22:06.459Z</updated>
  <id>http://wfxiong1990.github.io/</id>
  
  <author>
    <name><![CDATA[Weifeng Xiong]]></name>
    <email><![CDATA[wfxiong1990@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[【LeetCode算法训练】 判断字符串是否是回文]]></title>
    <link href="http://wfxiong1990.github.io/2014/11/04/Valid-Palindrome/"/>
    <id>http://wfxiong1990.github.io/2014/11/04/Valid-Palindrome/</id>
    <published>2014-11-04T14:45:29.000Z</published>
    <updated>2014-11-04T15:21:47.000Z</updated>
    <content type="html"><![CDATA[<h2 id="什么是LeetCode">什么是LeetCode</h2>
<p>LeetCode 已是一个针对程序员招聘的颇具口碑的准备面试平台。虽然主要针对北美市场，但是内容也能很好的帮助大部分国内的IT面试者。</p>
<p>LeetCode上面有很多算法可以作为平时的脑力训练，适当做一做也可以提升程序猿打怪的经验值。</p>
<p>鄙人今年已经是第二个本命年了，有一种墙裂的不祥预感，俗称中年危机，所以要做做算法适当消遣来缓解压力。</p>
<h2 id="题目解析">题目解析</h2>
<p>题目如下：</p>
<blockquote>
<p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p>
<p>For example,<br>“A man, a plan, a canal: Panama” is a palindrome.<br>“race a car” is not a palindrome.</p>
</blockquote>
<p>Palindrome 直译过来叫回文。什么是回文？<del>大波美人鱼人美波大</del>，一句话解释，简单暴力，就是从左读和从右读是一样的，那程序思路就简单了，把字符串分成字符的数组，第一个和倒数第一个比较，第二个和倒数第二个比较，依此类推。</p>
<p>python里面字符串就是一个由字符组成的序列，所以字符串和序列不需要转换大部分方法可以通用。</p>
<h2 id="难度★☆☆☆☆">难度★☆☆☆☆</h2>
<p>如果你要鄙视我，这种算法都要写博客，请<code>ctrl+w</code>，不用谢。</p>
<h2 id="代码示例">代码示例</h2>
<p>如下所示：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, s)</span>:</span></div><div class="line">        sumstr = []</div><div class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> s:</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> item.isalpha() <span class="keyword">or</span> <span class="keyword">not</span> item.isalnum():<span class="comment">#判断是否是数字或者字符</span></div><div class="line">                <span class="keyword">continue</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                sumstr += item.lower()</div><div class="line">        <span class="keyword">if</span> sumstr.__len__() &gt; <span class="number">0</span>:</div><div class="line">            i = <span class="number">0</span></div><div class="line">            <span class="keyword">while</span> i &lt; sumstr.__len__() / <span class="number">2</span>:</div><div class="line">                <span class="keyword">if</span> sumstr[i] != sumstr[sumstr.__len__() - <span class="number">1</span> - i]:</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">                i += <span class="number">1</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:<span class="comment">#主函数</span></div><div class="line">    solu = Solution()</div><div class="line">    validStr = <span class="string">u"A man, a plan, a canal: Panama"</span></div><div class="line">    result = solu.isPalindrome(validStr)</div><div class="line">    print()</div></pre></td></tr></table></figure>

<h2 id="小结">小结</h2>
<p>算法不难，但是如果是C#或者java的话可能要注意输入的字符串为空的情况，python可以直接转为长度为0的序列，目测不存在报错的问题。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="什么是LeetCode">什么是LeetCode</h2>
<p>LeetCode 已是一个针对程序员招聘的颇具口碑的准备面试平台。虽然主要针对北美市场，但是内容也能很好的帮助大部分国内的IT面试者。</p>
<p>LeetCode上面有很多算法可以作为平时的脑力]]>
    </summary>
    
      <category term="python" scheme="http://wfxiong1990.github.io/tags/python/"/>
    
      <category term="leetcode" scheme="http://wfxiong1990.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用python来拷贝文件到指定文件夹并启动对应程序]]></title>
    <link href="http://wfxiong1990.github.io/2014/10/25/copying-files-and-run-command-to-start-exe-via-python/"/>
    <id>http://wfxiong1990.github.io/2014/10/25/copying-files-and-run-command-to-start-exe-via-python/</id>
    <published>2014-10-25T04:15:16.000Z</published>
    <updated>2014-10-25T04:34:58.000Z</updated>
    <content type="html"><![CDATA[<h2 id="码代码目的">码代码目的</h2>
<p>因为工作需要，经常要把自己项目下的dll从debug版本拷贝到publish版本，然后启动publish版本下面的exe程序，由于重复劳动多次后，决定来造福自己一下。</p>
<h2 id="开始码代码">开始码代码</h2>
<p>两个技术点，一是用python来复制文件并且覆盖原文件，二是从cmd来启动应用程序。</p>
<h3 id="python复制文件">python复制文件</h3>
<p>有两种方法，一种是用自带的open和write方法来实现文件的打开和写入，上代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">open(targetFile, <span class="string">"wb"</span>).write(open(sourceFile, <span class="string">"rb"</span>).read())</div></pre></td></tr></table></figure>

<p>其中wb和rb分别对应的写二进制文件和读二进制文件。所以代码的意思就是，把sourcefile用二进制的方式都进来，然后再写到targetfile文件中去。</p>
<p>经过测试，我发现把targetfile的属性改成只读的，读写文件的方法也能够把文件从源文件夹复制到目的文件夹，而且复制完以后只读属性还在的。</p>
<p>还有一种就是调用shutil.py模块里面的copyfile的方法，简单暴力。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> shutil</div><div class="line"></div><div class="line">shutil.copyfile(sourcefile,targetfile)</div><div class="line">shutil.copy2(sourcefile,targetfile)  <span class="comment">#原文件的所有属性状态全部复制</span></div></pre></td></tr></table></figure>

<p>shutil里面有很多copy的方法，各自有细微的区别，具体参考<a href="http://www.cnblogs.com/CLTANG/archive/2011/11/15/2249257.html" target="_blank" rel="external">http://www.cnblogs.com/CLTANG/archive/2011/11/15/2249257.html</a>。需要注意的是，sourcefile和targetfile必须是<strong>文件</strong>的绝对路径，而不是文件名的绝对路径，否则程序会报错。</p>
<h3 id="从命令行启动程序">从命令行启动程序</h3>
<p>首先，看看你的程序是否可以从cmd启动，也是是<code>Win+R</code>打开cmd后输入程序的绝对路径，例如<code>E:\Program Files (x86)\Tencent\QQ\Bin\QQ.exe</code>回车，如果能跳出程序的话，好办了~<br>用subprocess的check_call方法直接调用就可以了</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">subprocess.check_call([<span class="string">u"E:\\Program Files (x86)\\Tencent\\QQ\\Bin\\QQ.exe"</span>])</div></pre></td></tr></table></figure>

<p>后面还可以跟好多参数，具体见这里<a href="https://docs.python.org/2.7/library/subprocess.html#subprocess.check_call" target="_blank" rel="external">https://docs.python.org/2.7/library/subprocess.html#subprocess.check_call</a><br>官方的说明如下：</p>
<blockquote>
<p>Run command with arguments. Wait for command to complete. If the return code was zero then return, otherwise raise CalledProcessError. </p>
</blockquote>
<p>好了，大功告成，现在贴一下做所有的代码:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=UTF-8</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> subprocess</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">copyFiles</span><span class="params">(sourceDir, targetDir)</span>:</span>  <span class="comment"># 把某一文件夹下的指定文件复制到目标文件夹中    </span></div><div class="line">    fileList = [<span class="string">'1.dll'</span>, <span class="string">'2.dll'</span>, <span class="string">'3.dll'</span>, <span class="string">'4.dll'</span>, <span class="string">'5.dll'</span>, <span class="string">'6.dll'</span>,</div><div class="line">                <span class="string">'7.dll'</span>, <span class="string">'8.dll'</span>]</div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> fileList:</div><div class="line">        sourceFile = os.path.join(sourceDir, item)</div><div class="line">        targetFile = os.path.join(targetDir, item)</div><div class="line">        <span class="keyword">if</span> os.path.isfile(sourceFile):</div><div class="line">            <span class="keyword">try</span>:                </div><div class="line">                open(targetFile, <span class="string">"wb"</span>).write(open(sourceFile, <span class="string">"rb"</span>).read())</div><div class="line">                <span class="keyword">print</span> (<span class="string">"'copy file "</span>,item,<span class="string">" successfully!'"</span>)</div><div class="line">            <span class="keyword">except</span> StandardError, e:</div><div class="line">                <span class="keyword">print</span> e.message</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:  <span class="comment"># 主函数</span></div><div class="line">    sourceDir = <span class="string">'D:\\my_program\\Debug\\bin'</span></div><div class="line">    targetStr=raw_input(<span class="string">'Press r to copy to release or others to copy to publish\n'</span>)</div><div class="line">    <span class="comment"># targetDir</span></div><div class="line">    <span class="keyword">if</span>(targetStr.lower()==<span class="string">'r'</span>):</div><div class="line">        targetDir = <span class="string">'D:\\my_program\\Release\\bin'</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        targetDir=<span class="string">'D:\\my_program\\Publish\\bin'</span></div><div class="line">    copyFiles(sourceDir, targetDir)</div><div class="line">    subprocess.check_call([<span class="string">u"D:\\my_program\\target.exe"</span>])//通过命令行启动target.exe</div><div class="line">    raw_input(<span class="string">'Press any key to exit!'</span>)</div></pre></td></tr></table></figure>

<h2 id="总结">总结</h2>
<p>如果没有这个程序，那么之前我需要打开sourceDir文件夹，在200多个文件中找到需要的dll，然后再打开targetDir,复制过去，会弹框说该目录下已存在此文件，把 <em>为之后7个冲突执行此操作</em> 打上勾，点复制和替换，找到target.exe，双击启动。现在呢，双击这个copydll.py文件，然后dll复制好了，程序也起来了，it works！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="码代码目的">码代码目的</h2>
<p>因为工作需要，经常要把自己项目下的dll从debug版本拷贝到publish版本，然后启动publish版本下面的exe程序，由于重复劳动多次后，决定来造福自己一下。</p>
<h2 id="开始码代码">开始码代码</h]]>
    </summary>
    
      <category term="python" scheme="http://wfxiong1990.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用python实现图灵聊天机器人的接口]]></title>
    <link href="http://wfxiong1990.github.io/2014/10/25/using-python-to-call-tuling123-api/"/>
    <id>http://wfxiong1990.github.io/2014/10/25/using-python-to-call-tuling123-api/</id>
    <published>2014-10-24T16:13:03.000Z</published>
    <updated>2014-10-28T15:00:59.000Z</updated>
    <content type="html"><![CDATA[<h2 id="码这坨代码目的">码这坨代码目的</h2>
<p>在知乎上看到，<a href="http://www.zhihu.com/question/20492916" target="_blank" rel="external">微信公众平台的聊天机器人是怎么搭建？</a>的主题,对图灵机器人感兴趣起来，官方有php和java的实现，那么，python的简单实现，就我了。</p>
<h2 id="开始码代码啦">开始码代码啦</h2>
<p>首先，需要import一下urllib2这个组件，用于以GET的方式请求。<br>发请求的部分：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">req = urllib2.Request(url)</div></pre></td></tr></table></figure>

<p>收到请求</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">res_data = urllib2.urlopen(req)</div><div class="line">res = res_data.read()</div></pre></td></tr></table></figure>

<p>收到的是以字符串的形式，当然也可以转换成字典或者json，个人比较喜好json（一种类xml的储存和交换文本信息的语法），那么再import一下json的库</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dic=eval(res)  <span class="comment">#转换为字典</span></div><div class="line">myJson2=json.loads(res)  <span class="comment">#转换为json</span></div></pre></td></tr></table></figure>

<p>好了，大功告成，但是问题来了，如何在命令行里面一直保持程序能接受到用户输入的状态，经stackoverflow的指点，用while True 然后如果用户直接回车那么break出来。最后程序如下，太短了，自己都看不下去了。。。<br>ps: 根据图灵机器人给出的借口文档，如果请求的链接里面带userid的话会联系上下文返回，所以建议加上。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=UTF-8</span></div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"></div><div class="line">url = <span class="string">"http://www.tuling123.com/openapi/api?key=09e28a9f654a341ad11601cd0e1bf44_&userid＝hackerxiong&info="</span>  <span class="comment">#key的最后一位省略了，想知道的请留言找我推荐注册哈；输入参数info就是要请求的内容</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:  <span class="comment">##一直保持循环输入状态</span></div><div class="line">    entered = raw_input(<span class="string">"Please enter your input or leave a blank line to quit: \n"</span>)  <span class="comment">##拿到用户的输入，默认是string的类型</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> entered:</div><div class="line">        <span class="keyword">break</span>  <span class="comment">##直到空回车break出循环</span></div><div class="line">    url+=entered</div><div class="line">    req = urllib2.Request(url)</div><div class="line">    <span class="comment"># print req</span></div><div class="line">    res_data = urllib2.urlopen(req)</div><div class="line">    res = res_data.read()  <span class="comment">##拿到的响应也是string类型</span></div><div class="line">    <span class="comment"># print res</span></div><div class="line">    dic=eval(res)  <span class="comment">#转换为字典</span></div><div class="line">    myJson2=json.loads(res)  <span class="comment">#转换为json</span></div><div class="line">    print(res+<span class="string">"\n"</span>)</div></pre></td></tr></table></figure>

<p>最后，来看看效果如何，哈哈哈（我输了好多次才有这效果，看来机器人还是不够智能）<img src="http://ww1.sinaimg.cn/large/6788d2b1jw1elmpnt5rfqj20zk0dfad2.jpg" alt=""></p>
<p>附上常用的返回code 的说明，其他的详见：<a href="http://www.tuling123.com/openapi/cloud/api.jsp?section=8" target="_blank" rel="external">http://www.tuling123.com/openapi/cloud/api.jsp?section=8</a></p>
<table>
<thead>
<tr>
<th></th>
<th>code</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>100000</td>
<td>文本类数据</td>
<td></td>
</tr>
<tr>
<td></td>
<td>200000</td>
<td>网址类数据</td>
<td></td>
</tr>
<tr>
<td></td>
<td>40002</td>
<td>请求内容为空</td>
<td></td>
</tr>
<tr>
<td></td>
<td>40007</td>
<td>服务器数据格式异常</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="Todolist">Todolist</h2>
<p>貌似api接入的效果不太好，问了几个问题后开始有重复的回复出现，不知道是我发请求不对还是他们服务器返回就是这样子（不要找借口），有空再研究研究。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="码这坨代码目的">码这坨代码目的</h2>
<p>在知乎上看到，<a href="http://www.zhihu.com/question/20492916" target="_blank" rel="external">微信公众平台的聊天机器人是怎么搭建？</]]>
    </summary>
    
      <category term="python" scheme="http://wfxiong1990.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[利用GitHub Pages 和 Hexo 搭建静态博客]]></title>
    <link href="http://wfxiong1990.github.io/2014/10/12/how-to-build-a-blog-system-using-github-and-hexo/"/>
    <id>http://wfxiong1990.github.io/2014/10/12/how-to-build-a-blog-system-using-github-and-hexo/</id>
    <published>2014-10-11T16:51:20.000Z</published>
    <updated>2014-10-28T14:57:14.000Z</updated>
    <content type="html"><![CDATA[<p>无意中在知乎上看到了这样一个话题：<a href="http://www.zhihu.com/question/20962496" target="_blank" rel="external">如何在 GitHub 上写博客？</a> 于是开始自己捣腾，现在分享一下自己搭建博客的一点心得和笔记。</p>
<h2 id="GitHub_Pages">GitHub Pages</h2>
<p>给我的感觉就是，给我一个index.html，我能给你变出一个世界，其实不管什么语言什么架构搭建的项目，只要把index.html 放上去，并且本地能正常运行，这就是<strong>静态网页程序</strong>。那么github pages就能显示出你想要的网页来，一般github pages 的地址是<code>yourname.github.io</code>,<em>yourname</em>是你的github用户名，貌似一个github账号对应一个github pages，如果需要从自己的域名进入，那么只需要在项目的source目录下加一个CNAME文件即可，如果是Mac下面或者Linux的环境，一行命令搞定：</p>
<p><code>vim CNAME</code> 或者<code>touch CNAME</code></p>
<p>记得用vim的时候记得:wq 保存退出。</p>
<blockquote>
<p>ps:由于缓存的原因，第一次上传github pages 项目的时候需要等待几分钟左右，才能在yourname.github.io上看到。</p>
</blockquote>
<h2 id="Git">Git</h2>
<p>说到GitHub，顾名思义，git是一个分布式的版本控制系统，这里不详细描述，hub在geek的心里就是集线器的意思吧，所以要在github上写博客，首先要学会用git，git不需要很深入的学习，但基本的命令还是要掌握的，这里推荐一下<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013743858312764dca7ad6d0754f76aa562e3789478044000" target="_blank" rel="external">廖雪峰的Git教程</a>。</p>
<p>首先你的电脑上要有git环境，如果输入<code>git --version</code>或者<code>whois git</code>如下图所示<img src="http://ww3.sinaimg.cn/mw690/6788d2b1jw1elr9bsup7zj20jf0fpwg2.jpg" alt="git in terminal">，那就是ok的，否则，需要在<a href="http://git-scm.com/downloads" target="_blank" rel="external">这里</a>下载对应系统的git安装包。</p>
<p>Git的基础操作很简单，无非是<code>git init</code> ,<code>git add</code>,<code>git commit</code>,<code>git status</code>,<code>git push</code>和<code>git pull</code>，对应的操作是当前文件夹初始化、把文件纳入版本管理，提交更改，检查状态，push status的变化到远程repository，把远程repository的更新拉下来，但是git 最牛的地方在对分支的管理，这方便我还掌握不够，大家可以参考上文中提到的廖雪峰的Git教程。</p>
<h2 id="Hexo">Hexo</h2>
<p><a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>是一个基于Node.js的静态博客程序，可以方便的生成静态网页托管在github和Heroku上。顾名思义，它是基于Node.js的，所以先要有Node.js的环境，<a href="http://www.infoq.com/cn/articles/nodejs-npm-install-config" target="_blank" rel="external">安装教程在此</a>。由于本人的macbook上安装了<a href="http://brew.sh/index_zh-cn.html" target="_blank" rel="external">Homebrew</a>，所以安装node只需要以下命令：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>brew update</div><div class="line"><span class="variable">$ </span>brew install node</div></pre></td></tr></table></figure>

<p>不得不赞，macbook真的是开发者最好的玩具，比逼格更有生产力啊。<br>如果是windows，如果在cmd命令行里面输入<code>npm --version</code>没有显示，那么去<a href="http://nodejs.org/download/" target="_blank" rel="external">这里</a>下载nodejs的安装包，安装之。</p>
<p>Hexo虽然基于Node.js但是我们不需要了解Node.js编程，需要的只是4条命令：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>hexo g  <span class="comment">##生成静态博客的public文件夹，也就是要上传到GitHub Pages的那部分文件</span></div><div class="line"><span class="variable">$ </span>hexo s  <span class="comment">##运行本地的博客程序，比如你设置的端口号是4000的话，浏览器打开localhost:4000 就可以看到你搭建的博客是什么样子的了</span></div><div class="line"><span class="variable">$ </span>hexo d  <span class="comment">##上传本地的修改到远程仓库 前提是你在_config.yml里面设置了git仓库的路径和分支</span></div><div class="line"><span class="variable">$ </span>hexo n  <span class="comment">##新建一篇博客，就是new一个*.md的markdown文件，如果是在Mac下面可以直接用Mou程序打开</span></div></pre></td></tr></table></figure>

<p>看上去简单吧～</p>
<p>推荐本地运行的时候把日志打开，这样哪里缺文件配置有问题一目了然。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span><span class="symbol">logger:</span> <span class="keyword">false</span></div><div class="line"><span class="variable">$ </span><span class="symbol">logger_format:</span> dev</div></pre></td></tr></table></figure>

<p>记住至少要在冒号后有一个空格，博客才能正确运行。</p>
<h2 id="Hexo主题优化">Hexo主题优化</h2>
<p>本博客采用了<a href="https://github.com/A-limon/pacman" target="_blank" rel="external">Pacman的主题</a>。<a href="http://yangjian.me/pacman/hello/introducing-pacman-theme/" target="_blank" rel="external">介绍在此</a>，不得不说，这个主题很漂亮，给人眼前一亮的感觉。用这个主题只要把github上的资源通过<code>git clone</code>到<code>本地的hexo目录\themes</code>下面，改一下hexo的_config.yml：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">theme</span>: <span class="string">pacman</span></div></pre></td></tr></table></figure>

<p>就可以了。</p>
<h2 id="Markdown">Markdown</h2>
<p>Markdown简直是程序猿的word编辑器，wikipedia里面介绍如下：</p>
<blockquote>
<p>Markdown 是一种轻量级标记语言，创始人为約翰·格魯伯（John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。</p>
</blockquote>
<p>Markdown的学习可以参考作业部落的<a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">CMD Markdown</a>在线的Markdown编辑器，很快就能上手的。</p>
<hr>
<h2 id="域名申请和绑定">域名申请和绑定</h2>
<p>很幸运，我通过github的student package 拿到了namecheap的一年 顶级域名 <code>xwf.me</code>的使用权，<a href="http://www.yd631.com/namecheap-free-me/" target="_blank" rel="external">申请方法</a>。拿到后把该域名的URL Forwarding 改成如下即可：<br><img src="http://ww4.sinaimg.cn/mw690/6788d2b1gw1elm37g1b7gj20ju07zdgr.jpg" alt="image"></p>
<p>具体教程<a href="http://davidensinger.com/2013/03/setting-the-dns-for-github-pages-on-namecheap/" target="_blank" rel="external">戳这里</a>。</p>
<h2 id="小结">小结</h2>
<p>自己搭建博客还是很拼的，各种google，百度还是算了，推荐一个网站：<a href="http://tmd123.com" target="_blank" rel="external">通天塔</a>，把google镜像到AWS亚马逊云上面，速度上还是靠谱的，<del>隐私问题，反正应该比百度靠谱吧，我也不知道</del>。<br>能有独立域名，网站还很干净，没广告，markdown熟练后也很方便，写博客也能慢慢改进自己描述问题不清楚，无法正确表达观点的问题。理科生，怀才不遇的大都连自己会啥都说不清楚。</p>
<p>好了，本篇就到这里吧，谢谢观赏，我不是<a href="http://weibo.com/jiaoshoutv" target="_blank" rel="external">叫兽易小星</a>，我从不做广告～</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>无意中在知乎上看到了这样一个话题：<a href="http://www.zhihu.com/question/20962496" target="_blank" rel="external">如何在 GitHub 上写博客？</a> 于是开始自己捣腾，现在分享一下自己搭建]]>
    </summary>
    
      <category term="Hexo" scheme="http://wfxiong1990.github.io/tags/Hexo/"/>
    
      <category term="Git" scheme="http://wfxiong1990.github.io/tags/Git/"/>
    
  </entry>
  
</feed>
